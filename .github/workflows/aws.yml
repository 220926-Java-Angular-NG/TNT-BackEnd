# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: tnt-backend           # set this to your Amazon ECR repository name
  CONTAINER_NAME: i-0561a1d0229b2a627           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read-write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Dockerhub login
      env:
        DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      run:
        docker login -u DOCKER_USERNAME -p DOCKER_PASSWORD
    
    - name: Docker Push
      env:
        REPO: tnt-backend
      run:
        docker build -t $REPO .
        docker tag $REPO:latest ${{secrets.DOCKER_USERNAME}}/$REPO:latest
        docker push ${{secrets.DOCKER_USERNAME}}/$REPO
        
    - name: Docker pull and run from hub
      uses: appleboy/ssh-action@master
      with:
        host: ip-172-31-86-131.ec2.internal
        username: ${{secrets.SSH_USER}}
        key: ${{secrets.SSH_KEY}}
        port: 8080
        envs:
          GITHUB_SHA
        script:
          docker login
          docker pull ${{secrets.DOCKER_USERNAME}}/$REPO
          docker stop tnt-backend
          docker rm tnt-backend
          docker run --detach --name tnt-backend -p 8080:8080 ${{secrets.DOCKER_USERNAME}}/$REPO
          
      
    
    
    
    
    
    
    
    
